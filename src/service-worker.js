/* eslint-disable no-restricted-globals */
/* global clients */


import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently-used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// In src/service-worker.js

// Lausche auf das periodicsync-Event
self.addEventListener('periodicsync', (event) => {
  // Wir reagieren nur auf das Tag, das wir in der App registriert haben
  if (event.tag === 'update-check') {
    console.log('Führe periodische Update-Prüfung aus...');
    // event.waitUntil() sorgt dafür, dass der Service Worker nicht "einschläft",
    // bevor unsere asynchrone Aufgabe beendet ist.
    event.waitUntil(checkForUpdates());
  }
});

async function checkForUpdates() {
  try {
    // self.registration.update() ist der eingebaute Befehl, um den
    // Service Worker mit der Version auf dem Server zu vergleichen.
    // Der Browser führt im Hintergrund einen Byte-Vergleich durch.
    const registration = await self.registration.update();

    // Wenn ein neuer Worker gefunden wurde, steht er jetzt im 'waiting'-Status
    if (registration && registration.waiting) {
      console.log('Neuer Worker gefunden und wartet. Zeige Benachrichtigung an.');
      // Optional, aber sehr empfohlen: Den Nutzer per Web-Notification informieren.
      self.registration.showNotification('Update verfügbar!', {
        body: 'Eine neue Version des Vokabel-Trainers ist bereit zur Installation.',
        icon: '/logo192.png', // Pfad zu deinem App-Icon
        tag: 'update-notification', // Verhindert, dass mehrere gleiche Benachrichtigungen erscheinen
      });
    } else {
      console.log('Kein Update gefunden.');
    }
  } catch (error) {
    console.error('Fehler bei der Update-Prüfung:', error);
  }
}

// In src/service-worker.js

self.addEventListener('notificationclick', (event) => {
  // Schließe die Benachrichtigung
  event.notification.close();

  // Öffne die App oder fokussiere einen bereits offenen Tab
  event.waitUntil(
    clients.matchAll({ type: 'window' }).then((clientList) => {
      for (const client of clientList) {
        if ('focus' in client) {
          return client.focus();
        }
      }
      if (clients.openWindow) {
        return clients.openWindow('/');
      }
    })
  );
});